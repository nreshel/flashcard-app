{"ast":null,"code":"var _jsxFileName = \"/Users/rodeshel/Desktop/flashcard-app/src/App.js\";\nimport React, { Component } from 'react';\nimport Card from './components/Card';\nimport AddCard from './components/AddCard';\nimport SearchCard from './components/SearchCard';\nimport { DB_CONFIG } from './db/Firebase.js';\nimport firebase from 'firebase';\nimport './App.css';\nexport class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.cardTimeDone = () => {\n      let cardAdded = new Date();\n    };\n\n    this.resetCardTime = ([...cardsDone], [...cards]) => {\n      cardsDone.map(cardDone => {\n        return cards.includes(cardsDone.id);\n      });\n    };\n\n    this.updateNextCard = cards => {\n      var i = this.state.index;\n\n      if (!(i + 1 in cards)) {\n        return cards[0];\n      } else {\n        return cards[i + 1];\n      } // const card = cards[Math.floor(Math.random() * cards.length)];\n      // return card;\n\n    };\n\n    this.appendIndex = index => {\n      var list = this.state.cards;\n\n      if (index + 1 > list.length - 1) {\n        return 0;\n      } else {\n        return index + 1;\n      }\n    };\n\n    this.nextCard = () => {\n      this.setState({\n        cards: this.state.cards,\n        card: this.updateNextCard(this.state.cards),\n        index: this.appendIndex(this.state.index)\n      });\n      var cardsDonezo = this.state.cardsDone;\n      cardsDonezo.map(card => {\n        return console.log(Date.parse(new Date()));\n      });\n    };\n\n    this.updatePrevCard = cards => {\n      var i = this.state.index;\n\n      if (!(i - 1 in cards)) {\n        return cards[cards.length - 1];\n      } else {\n        return cards[i - 1];\n      } // const card = cards[Math.floor(Math.random() * cards.length)];\n      // return card;\n\n    };\n\n    this.subtractIndex = index => {\n      var list = this.state.cards;\n\n      if (index - 1 < 0) {\n        return list.length - 1;\n      } else {\n        return index - 1;\n      }\n    };\n\n    this.prevCard = () => {\n      this.setState({\n        cards: this.state.cards,\n        card: this.updatePrevCard(this.state.cards),\n        index: this.subtractIndex(this.state.index)\n      });\n    };\n\n    this.resetState = () => {\n      this.setState({\n        cards: [],\n        card: {},\n        index: 1\n      });\n    };\n\n    this.removeCard = id => {\n      console.log(id);\n      this.resetState();\n      var refList = [];\n      console.log(refList);\n      this.database.child(id).remove();\n      var newCards = this.refreshCards(refList);\n      this.setState({\n        cards: newCards,\n        card: newCards[0],\n        index: 1\n      });\n    };\n\n    this.refreshCards = cardList => {\n      this.database.on('child_added', snap => {\n        cardList.push({\n          id: snap.key,\n          eng: snap.val().eng,\n          han: snap.val().han,\n          pin: snap.val().pin,\n          done: snap.val().done,\n          date: snap.val().date\n        });\n      });\n      return cardList;\n    };\n\n    this.cardLearned = card => {\n      var day = new Date();\n      console.log(day); // Apr 30 2000\n\n      var nextDay = new Date(day);\n      const tomorrow = nextDay.setDate(day.getDate() + 1); // console.log(nextDay);\n      // var date = tomorrow.getFullYear()+'-'+(tomorrow.getMonth()+1)+'-'+tomorrow.getDate();\n\n      console.log(card.done, tomorrow);\n      this.databaseLearned.push().set({\n        parentId: card.id,\n        eng: card.eng,\n        pin: card.pin,\n        han: card.han,\n        done: card.done + 1,\n        date: tomorrow\n      });\n    };\n\n    this.app = firebase.initializeApp(DB_CONFIG);\n    this.database = this.app.database().ref().child('cards');\n    this.databaseLearned = this.app.database().ref().child('cards-learned');\n    this.state = {\n      cards: [],\n      cardsDone: [],\n      card: {},\n      index: 0\n    };\n  }\n\n  componentWillMount() {\n    const dbCards = this.state.cards;\n    const dbCardsDone = this.state.cardsDone;\n    this.database.on('child_added', snap => {\n      dbCards.push({\n        id: snap.key,\n        eng: snap.val().eng,\n        han: snap.val().han,\n        pin: snap.val().pin,\n        done: snap.val().done,\n        date: snap.val().date\n      });\n      this.setState({\n        cards: this.state.cards,\n        card: this.state.cards[0],\n        index: 0\n      });\n    });\n    this.databaseLearned.on('child_added', snap => {\n      dbCardsDone.push({\n        childId: snap.key,\n        parentId: snap.val().id,\n        eng: snap.val().eng,\n        han: snap.val().han,\n        pin: snap.val().pin,\n        done: snap.val().done,\n        date: snap.val().date\n      });\n      this.setState({\n        cardsDone: dbCardsDone\n      });\n    }); // this.cardTimeDone;\n\n    this.database.on('child_removed', snap => {\n      this.state.cards.map(card => {\n        this.state.cardsDone.forEach(cardDone => {\n          if (cardDone.id === card.id) {\n            this.databaseLearned.child(snap.key);\n          }\n        });\n      });\n    });\n  }\n\n  componentDidMount() {\n    // console.log(this.resetCardTime(this.state.cardsDone, this.state.cards));\n    var check = this.state.cardsDone.filter(o => !this.state.cardDone.find(o2 => o.id === o2.id));\n    console.log([...check]);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, \"Flashcard app\"), React.createElement(Card, {\n      card: this.state.card,\n      prevCard: this.prevCard,\n      nextCard: this.nextCard,\n      removeCard: this.removeCard,\n      cardLearned: this.cardLearned,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }), React.createElement(AddCard, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }), React.createElement(SearchCard, {\n      cards: this.state.cards,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }));\n  }\n\n}\nexport default App;","map":{"version":3,"sources":["/Users/rodeshel/Desktop/flashcard-app/src/App.js"],"names":["React","Component","Card","AddCard","SearchCard","DB_CONFIG","firebase","App","constructor","props","cardTimeDone","cardAdded","Date","resetCardTime","cardsDone","cards","map","cardDone","includes","id","updateNextCard","i","state","index","appendIndex","list","length","nextCard","setState","card","cardsDonezo","console","log","parse","updatePrevCard","subtractIndex","prevCard","resetState","removeCard","refList","database","child","remove","newCards","refreshCards","cardList","on","snap","push","key","eng","val","han","pin","done","date","cardLearned","day","nextDay","tomorrow","setDate","getDate","databaseLearned","set","parentId","app","initializeApp","ref","componentWillMount","dbCards","dbCardsDone","childId","forEach","componentDidMount","check","filter","o","find","o2","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Card from './components/Card';\nimport AddCard from './components/AddCard';\nimport SearchCard from './components/SearchCard';\nimport { DB_CONFIG } from './db/Firebase.js';\nimport firebase from 'firebase';\nimport './App.css';\nexport class App extends Component {\n  constructor(props) {\n    super(props)\n    this.app = firebase.initializeApp(DB_CONFIG);\n    this.database = this.app.database().ref().child('cards');\n    this.databaseLearned = this.app.database().ref().child('cards-learned');\n    this.state = {\n      cards: [],\n      cardsDone: [],\n      card: {},\n      index: 0\n    }\n  }\n\n  componentWillMount() {\n    const dbCards = this.state.cards;\n    const dbCardsDone = this.state.cardsDone;\n    this.database.on('child_added', snap => {\n      dbCards.push({\n        id: snap.key,\n        eng: snap.val().eng,\n        han: snap.val().han,\n        pin: snap.val().pin,\n        done: snap.val().done,\n        date: snap.val().date\n      })\n      this.setState({\n        cards: this.state.cards,\n        card: this.state.cards[0],\n        index: 0\n      })\n    })\n\n    this.databaseLearned.on('child_added', snap => {\n      dbCardsDone.push({\n        childId: snap.key,\n        parentId: snap.val().id,\n        eng: snap.val().eng,\n        han: snap.val().han,\n        pin: snap.val().pin,\n        done: snap.val().done,\n        date: snap.val().date\n      })\n      this.setState({\n        cardsDone: dbCardsDone\n      })\n    })\n    // this.cardTimeDone;\n    this.database.on('child_removed', snap => {\n      this.state.cards.map(card => {\n        this.state.cardsDone.forEach(cardDone => {\n          if(cardDone.id === card.id) {\n            this.databaseLearned.child(snap.key)\n          }\n        });\n      });\n    })\n    \n  }\n\n  componentDidMount() {\n    // console.log(this.resetCardTime(this.state.cardsDone, this.state.cards));\n    var check = this.state.cardsDone.filter(o => !this.state.cardDone.find(o2 => o.id === o2.id))\n    console.log([...check]);\n  }\n  cardTimeDone = () => {\n    let cardAdded = new Date();\n  }\n\n  resetCardTime = ([...cardsDone], [...cards]) => {\n    cardsDone.map((cardDone) => {\n      return cards.includes(cardsDone.id);\n    });\n  }\n  updateNextCard = (cards) => {\n    var i = this.state.index;\n    if(!(i+1 in cards)) {\n      return cards[0];\n    } else {\n      return cards[i+1];\n    }\n    // const card = cards[Math.floor(Math.random() * cards.length)];\n    // return card;\n  }\n  appendIndex = (index) => {\n    var list = this.state.cards;\n    if(index+1 > list.length - 1) {\n      return 0;\n    } else {\n      return index + 1;\n    }\n  }\n  nextCard = () => {\n    this.setState({\n      cards: this.state.cards,\n      card: this.updateNextCard(this.state.cards),\n      index: this.appendIndex(this.state.index)\n    })\n    var cardsDonezo = this.state.cardsDone;\n\n    cardsDonezo.map((card) => {\n      return console.log(Date.parse(new Date()));\n    })\n  }\n  updatePrevCard = (cards) => {\n    var i = this.state.index;\n    if(!(i-1 in cards)) {\n      return cards[cards.length - 1];\n    } else {\n      return cards[i-1];\n    }\n    // const card = cards[Math.floor(Math.random() * cards.length)];\n    // return card;\n  }\n \n  subtractIndex = (index) => {\n    var list = this.state.cards;\n    if(index-1 < 0) {\n      return list.length - 1;\n    } else {\n      return index - 1;\n    }\n  }\n  prevCard = () => {\n    this.setState({\n      cards: this.state.cards,\n      card: this.updatePrevCard(this.state.cards),\n      index: this.subtractIndex(this.state.index)\n    })\n  }\n  resetState = () => {\n    this.setState({\n      cards: [],\n      card: {},\n      index: 1\n    })\n  }\n  removeCard = (id) => {\n    console.log(id);\n    this.resetState();\n    var refList = [];\n    console.log(refList);\n    this.database.child(id).remove();\n    var newCards = this.refreshCards(refList);\n    this.setState({\n      cards: newCards,\n      card: newCards[0],\n      index: 1\n    })\n  }\n  refreshCards = (cardList) => {\n    this.database.on('child_added', snap => {\n      cardList.push({\n        id: snap.key,\n        eng: snap.val().eng,\n        han: snap.val().han,\n        pin: snap.val().pin,\n        done: snap.val().done,\n        date: snap.val().date\n      })\n    })\n    return cardList;\n  }\n  cardLearned = (card) => {\n    var day = new Date();\n    console.log(day); // Apr 30 2000\n\n    var nextDay = new Date(day);\n    const tomorrow = nextDay.setDate(day.getDate()+1);\n    // console.log(nextDay);\n    // var date = tomorrow.getFullYear()+'-'+(tomorrow.getMonth()+1)+'-'+tomorrow.getDate();\n    console.log(card.done, tomorrow);\n    this.databaseLearned.push().set({\n      parentId: card.id,\n      eng: card.eng,\n      pin: card.pin,\n      han: card.han,\n      done: card.done + 1,\n      date: tomorrow\n    });\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Flashcard app</h1>\n        <Card card={this.state.card} prevCard={this.prevCard} nextCard={this.nextCard} removeCard={this.removeCard} cardLearned={this.cardLearned}/>\n        <AddCard />\n        <SearchCard cards={this.state.cards}/>\n      </div>\n    )\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}