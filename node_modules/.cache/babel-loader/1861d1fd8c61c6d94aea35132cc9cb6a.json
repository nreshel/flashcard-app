{"ast":null,"code":"var _jsxFileName = \"/Users/rodeshel/Desktop/flashcard-app/src/App.js\";\nimport React, { Component } from 'react';\nimport Card from './components/Card';\nimport AddCard from './components/AddCard';\nimport SearchCard from './components/SearchCard';\nimport { DB_CONFIG } from './db/Firebase.js';\nimport firebase from 'firebase';\nimport './App.css';\nexport class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.refDBLearned = () => {\n      // this.state.cardsDone.forEach(cardDone => {\n      // if(cardDone.date - Date.parse(new Date()) < 0) {\n      //   this.databaseLearned.child(cardDone.key).remove();\n      //   this.database.push().set({\n      //     id: cardDone.id,\n      //     eng: cardDone.eng,\n      //     han: cardDone.han,\n      //     pin: cardDone.pin,\n      //     done: cardDone.done\n      //   })\n      // console.log(cardDone.key)\n      // }\n      // })\n      console.log(cardsDone);\n    };\n\n    this.updateNextCard = cards => {\n      var i = this.state.index;\n\n      if (!(i + 1 in cards)) {\n        return cards[0];\n      } else {\n        return cards[i + 1];\n      } // const card = cards[Math.floor(Math.random() * cards.length)];\n      // return card;\n\n    };\n\n    this.appendIndex = index => {\n      var list = this.state.cards;\n\n      if (index + 1 > list.length - 1) {\n        return 0;\n      } else {\n        return index + 1;\n      }\n    };\n\n    this.nextCard = () => {\n      this.setState({\n        cards: this.state.cards,\n        card: this.updateNextCard(this.state.cards),\n        index: this.appendIndex(this.state.index)\n      });\n      var cardsDonezo = this.state.cardsDone; // var cardSearched = this.state.cardSearch;\n\n      cardsDonezo.map(card => {\n        return console.log(Date.parse(new Date()));\n      });\n      console.log(this.state.cardsDone, this.state.cardSearch);\n    };\n\n    this.updatePrevCard = cards => {\n      var i = this.state.index;\n\n      if (!(i - 1 in cards)) {\n        return cards[cards.length - 1];\n      } else {\n        return cards[i - 1];\n      } // const card = cards[Math.floor(Math.random() * cards.length)];\n      // return card;\n\n    };\n\n    this.subtractIndex = index => {\n      var list = this.state.cards;\n\n      if (index - 1 < 0) {\n        return list.length - 1;\n      } else {\n        return index - 1;\n      }\n    };\n\n    this.prevCard = () => {\n      this.setState({\n        cards: this.state.cards,\n        card: this.updatePrevCard(this.state.cards),\n        index: this.subtractIndex(this.state.index)\n      });\n    };\n\n    this.removeCard = id => {\n      console.log(id);\n      this.resetState();\n      var refList = [];\n      console.log(refList);\n      this.database.child(id).remove();\n      var newCards = this.refreshCards(refList);\n      this.setState({\n        cards: newCards,\n        card: newCards[0],\n        index: 1\n      });\n    };\n\n    this.refreshCards = cardList => {\n      this.database.on('child_added', snap => {\n        cardList.push({\n          id: snap.key,\n          eng: snap.val().eng,\n          han: snap.val().han,\n          pin: snap.val().pin,\n          done: snap.val().done,\n          date: snap.val().date\n        });\n      });\n      return cardList;\n    };\n\n    this.cardLearned = card => {\n      var day = new Date();\n      console.log(day); // Apr 30 2000\n\n      var nextDay = new Date(day);\n      const tomorrow = nextDay.setDate(day.getDate() + 1);\n      let refList = []; // console.log(nextDay);\n      // var date = tomorrow.getFullYear()+'-'+(tomorrow.getMonth()+1)+'-'+tomorrow.getDate();\n\n      console.log(card.done, tomorrow);\n      this.databaseLearned.push().set({\n        id: card.id,\n        eng: card.eng,\n        pin: card.pin,\n        han: card.han,\n        done: card.done + 1,\n        date: tomorrow\n      });\n      this.database.child(card.id).remove();\n      let newList = this.refreshCards(refList);\n      this.setState({\n        cards: newList,\n        card: this.state.cards[0],\n        index: 0\n      });\n    };\n\n    this.app = firebase.initializeApp(DB_CONFIG);\n    this.database = this.app.database().ref().child('cards');\n    this.databaseLearned = this.app.database().ref().child('cards-learned');\n    this.state = {\n      cards: [],\n      cardsDone: [],\n      cardSearch: [],\n      card: {},\n      index: 0\n    };\n    this.refDBLearned = this.refDBLearned.bind(this, this.state.cardsDone);\n  }\n\n  componentWillMount() {\n    const dbCards = this.state.cards;\n    const dbCardsDone = this.state.cardsDone;\n    const tempCards = [];\n    this.database.on('child_added', snap => {\n      dbCards.push({\n        id: snap.key,\n        eng: snap.val().eng,\n        han: snap.val().han,\n        pin: snap.val().pin,\n        done: snap.val().done\n      });\n      this.setState({\n        cards: dbCards,\n        card: this.state.cards[0],\n        index: 0\n      });\n    });\n    this.databaseLearned.on('child_added', snap => {\n      dbCardsDone.push({\n        key: snap.key,\n        id: snap.val().id,\n        eng: snap.val().eng,\n        han: snap.val().han,\n        pin: snap.val().pin,\n        done: snap.val().done,\n        date: snap.val().date\n      });\n      tempCards.push({\n        key: snap.key,\n        id: snap.val().id,\n        eng: snap.val().eng,\n        han: snap.val().han,\n        pin: snap.val().pin,\n        done: snap.val().done,\n        date: snap.val().date\n      });\n      this.setState({\n        cardsDone: dbCardsDone,\n        cardSearch: [...dbCards, ...dbCardsDone]\n      });\n    }); // .filter(cardDone => cardDone.date - Date.parse(new Date()) > 0)\n    // dbCardsDone.every((cardDone) => {\n    //   if(cardDone.date - Date.parse(new Date()) < 0) {\n    //     this.databaseLearned.child(cardDone.key).remove();\n    //     this.database.push().set({\n    //       id: cardDone.id,\n    //       eng: cardDone.eng,\n    //       han: cardDone.han,\n    //       pin: cardDone.pin,\n    //       done: cardDone.done\n    //     })\n    //   }\n    //   console.log(dbCardsDone);\n    //   return true;\n    // })\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }, \"Flashcard app\"), React.createElement(Card, {\n      card: this.state.card,\n      cards: this.state.cards,\n      cardsDone: this.state.cardsDone,\n      prevCard: this.prevCard,\n      nextCard: this.nextCard,\n      removeCard: this.removeCard,\n      cardLearned: this.cardLearned,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }), React.createElement(AddCard, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }), React.createElement(SearchCard, {\n      cardSearch: this.state.cardSearch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }));\n  }\n\n}\nexport default App;","map":{"version":3,"sources":["/Users/rodeshel/Desktop/flashcard-app/src/App.js"],"names":["React","Component","Card","AddCard","SearchCard","DB_CONFIG","firebase","App","constructor","props","refDBLearned","console","log","cardsDone","updateNextCard","cards","i","state","index","appendIndex","list","length","nextCard","setState","card","cardsDonezo","map","Date","parse","cardSearch","updatePrevCard","subtractIndex","prevCard","removeCard","id","resetState","refList","database","child","remove","newCards","refreshCards","cardList","on","snap","push","key","eng","val","han","pin","done","date","cardLearned","day","nextDay","tomorrow","setDate","getDate","databaseLearned","set","newList","app","initializeApp","ref","bind","componentWillMount","dbCards","dbCardsDone","tempCards","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Card from './components/Card';\nimport AddCard from './components/AddCard';\nimport SearchCard from './components/SearchCard';\nimport { DB_CONFIG } from './db/Firebase.js';\nimport firebase from 'firebase';\nimport './App.css';\nexport class App extends Component {\n  constructor(props) {\n    super(props)\n    this.app = firebase.initializeApp(DB_CONFIG);\n    this.database = this.app.database().ref().child('cards');\n    this.databaseLearned = this.app.database().ref().child('cards-learned');\n    this.state = {\n      cards: [],\n      cardsDone: [],\n      cardSearch: [],\n      card: {},\n      index: 0\n    }\n    this.refDBLearned = this.refDBLearned.bind(this, this.state.cardsDone);\n  }\n\n  componentWillMount() {\n    const dbCards = this.state.cards;\n    const dbCardsDone = this.state.cardsDone;\n    const tempCards = [];\n    this.database.on('child_added', snap => {\n      dbCards.push({\n        id: snap.key,\n        eng: snap.val().eng,\n        han: snap.val().han,\n        pin: snap.val().pin,\n        done: snap.val().done\n      })\n      this.setState({\n        cards: dbCards,\n        card: this.state.cards[0],\n        index: 0\n      })\n    })\n    \n    this.databaseLearned.on('child_added', (snap) => {\n      dbCardsDone.push({\n        key: snap.key,\n        id: snap.val().id,\n        eng: snap.val().eng,\n        han: snap.val().han,\n        pin: snap.val().pin,\n        done: snap.val().done,\n        date: snap.val().date\n      })\n      tempCards.push({\n        key: snap.key,\n        id: snap.val().id,\n        eng: snap.val().eng,\n        han: snap.val().han,\n        pin: snap.val().pin,\n        done: snap.val().done,\n        date: snap.val().date\n      })\n      this.setState({\n        cardsDone: dbCardsDone,\n        cardSearch: [...dbCards, ...dbCardsDone]\n      })\n    })\n    // .filter(cardDone => cardDone.date - Date.parse(new Date()) > 0)\n    // dbCardsDone.every((cardDone) => {\n    //   if(cardDone.date - Date.parse(new Date()) < 0) {\n    //     this.databaseLearned.child(cardDone.key).remove();\n    //     this.database.push().set({\n    //       id: cardDone.id,\n    //       eng: cardDone.eng,\n    //       han: cardDone.han,\n    //       pin: cardDone.pin,\n    //       done: cardDone.done\n    //     })\n    //   }\n    //   console.log(dbCardsDone);\n    //   return true;\n    // })\n  }\n  refDBLearned = () => {\n    // this.state.cardsDone.forEach(cardDone => {\n      // if(cardDone.date - Date.parse(new Date()) < 0) {\n      //   this.databaseLearned.child(cardDone.key).remove();\n      //   this.database.push().set({\n      //     id: cardDone.id,\n      //     eng: cardDone.eng,\n      //     han: cardDone.han,\n      //     pin: cardDone.pin,\n      //     done: cardDone.done\n      //   })\n        // console.log(cardDone.key)\n      // }\n    // })\n    console.log(cardsDone);\n  }\n  /**\n   * Go to the next element by retrieving the index\n   */\n  updateNextCard = (cards) => {\n    var i = this.state.index;\n    if(!(i+1 in cards)) {\n      return cards[0];\n    } else {\n      return cards[i+1];\n    }\n    // const card = cards[Math.floor(Math.random() * cards.length)];\n    // return card;\n  }\n  /**\n   * increase the index to point to the next element in the cards list\n   */\n  appendIndex = (index) => {\n    var list = this.state.cards;\n    if(index+1 > list.length - 1) {\n      return 0;\n    } else {\n      return index + 1;\n    }\n  }\n  /**\n   * Gets the next card\n   */\n  nextCard = () => {\n    this.setState({\n      cards: this.state.cards,\n      card: this.updateNextCard(this.state.cards),\n      index: this.appendIndex(this.state.index)\n    })\n    var cardsDonezo = this.state.cardsDone;\n    // var cardSearched = this.state.cardSearch;\n\n    cardsDonezo.map((card) => {\n      return console.log(Date.parse(new Date()));\n    })\n    console.log(this.state.cardsDone, this.state.cardSearch);\n  }\n\n  /**\n   * Helps get the previous element by retrieving the index\n   */\n  updatePrevCard = (cards) => {\n    var i = this.state.index;\n    if(!(i-1 in cards)) {\n      return cards[cards.length - 1];\n    } else {\n      return cards[i-1];\n    }\n    // const card = cards[Math.floor(Math.random() * cards.length)];\n    // return card;\n  }\n \n  /**\n   * Subtracts the index of the cards list to point to the previous element\n   */\n  subtractIndex = (index) => {\n    var list = this.state.cards;\n    if(index-1 < 0) {\n      return list.length - 1;\n    } else {\n      return index - 1;\n    }\n  }\n  /**\n   * Goes back to the previous card in the cards database\n   */\n  prevCard = () => {\n    this.setState({\n      cards: this.state.cards,\n      card: this.updatePrevCard(this.state.cards),\n      index: this.subtractIndex(this.state.index)\n    })\n  }\n  // resetState = () => {\n  //   this.setState({\n  //     cards: [],\n  //     card: {},\n  //     index: 1\n  //   })\n  // }\n\n  /**\n   * Removes the card from the cards database\n   */\n  removeCard = (id) => {\n    console.log(id);\n    this.resetState();\n    var refList = [];\n    console.log(refList);\n    this.database.child(id).remove();\n    var newCards = this.refreshCards(refList);\n    this.setState({\n      cards: newCards,\n      card: newCards[0],\n      index: 1\n    })\n  }\n  /**\n   * Refreshes cards when action occurs\n   */\n  refreshCards = (cardList) => {\n    this.database.on('child_added', snap => {\n      cardList.push({\n        id: snap.key,\n        eng: snap.val().eng,\n        han: snap.val().han,\n        pin: snap.val().pin,\n        done: snap.val().done,\n        date: snap.val().date\n      })\n    })\n    return cardList;\n  }\n  /**\n   * When done learning a card delete card from card database and transfer it to cards-learned database\n   */\n  cardLearned = (card) => {\n    var day = new Date();\n    console.log(day); // Apr 30 2000\n\n    var nextDay = new Date(day);\n    const tomorrow = nextDay.setDate(day.getDate()+1);\n    let refList = []\n    // console.log(nextDay);\n    // var date = tomorrow.getFullYear()+'-'+(tomorrow.getMonth()+1)+'-'+tomorrow.getDate();\n    console.log(card.done, tomorrow);\n    this.databaseLearned.push().set({ id: card.id, eng: card.eng, pin: card.pin, han: card.han, done: card.done + 1, date: tomorrow });\n    this.database.child(card.id).remove();\n    let newList = this.refreshCards(refList)\n    this.setState({ cards: newList, card: this.state.cards[0], index: 0 });\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Flashcard app</h1>\n        <Card card={this.state.card} cards={this.state.cards} cardsDone={this.state.cardsDone} prevCard={this.prevCard} nextCard={this.nextCard} removeCard={this.removeCard} cardLearned={this.cardLearned}/>\n        <AddCard />\n        <SearchCard cardSearch={this.state.cardSearch}/>\n      </div>\n    )\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}