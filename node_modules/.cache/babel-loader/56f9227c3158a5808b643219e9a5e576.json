{"ast":null,"code":"var _jsxFileName = \"/Users/rodeshel/Desktop/flashcard-app/src/App.js\";\nimport React, { Component } from 'react';\nimport Card from './components/Card';\nimport AddCard from './components/AddCard';\nimport SearchCard from './components/SearchCard';\nimport { DB_CONFIG } from './db/Firebase.js';\nimport firebase from 'firebase';\nimport './App.css';\nexport class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.updateNextCard = cards => {\n      var i = this.state.index;\n\n      if (!(i + 1 in cards)) {\n        return cards[0];\n      } else {\n        return cards[i + 1];\n      } // const card = cards[Math.floor(Math.random() * cards.length)];\n      // return card;\n\n    };\n\n    this.appendIndex = index => {\n      var list = this.state.cards;\n\n      if (index + 1 > list.length - 1) {\n        return 0;\n      } else {\n        return index + 1;\n      }\n    };\n\n    this.nextCard = () => {\n      this.setState({\n        cards: this.state.cards,\n        card: this.updateNextCard(this.state.cards),\n        index: this.appendIndex(this.state.index)\n      });\n      var cardsDonezo = this.state.cardsDone; // var cardSearched = this.state.cardSearch;\n\n      cardsDonezo.map(card => {\n        return console.log(Date.parse(new Date()));\n      });\n      console.log(this.state.cardsDone, this.state.cardSearch);\n    };\n\n    this.updatePrevCard = cards => {\n      var i = this.state.index;\n\n      if (!(i - 1 in cards)) {\n        return cards[cards.length - 1];\n      } else {\n        return cards[i - 1];\n      } // const card = cards[Math.floor(Math.random() * cards.length)];\n      // return card;\n\n    };\n\n    this.subtractIndex = index => {\n      var list = this.state.cards;\n\n      if (index - 1 < 0) {\n        return list.length - 1;\n      } else {\n        return index - 1;\n      }\n    };\n\n    this.prevCard = () => {\n      this.setState({\n        cards: this.state.cards,\n        card: this.updatePrevCard(this.state.cards),\n        index: this.subtractIndex(this.state.index)\n      });\n    };\n\n    this.resetState = () => {\n      this.setState({\n        cards: [],\n        card: {},\n        index: 1\n      });\n    };\n\n    this.removeCard = id => {\n      console.log(id);\n      this.resetState();\n      var refList = [];\n      console.log(refList);\n      this.database.child(id).remove();\n      var newCards = this.refreshCards(refList);\n      this.setState({\n        cards: newCards,\n        card: newCards[0],\n        index: 1\n      });\n    };\n\n    this.refreshCards = cardList => {\n      this.database.on('child_added', snap => {\n        cardList.push({\n          id: snap.key,\n          eng: snap.val().eng,\n          han: snap.val().han,\n          pin: snap.val().pin,\n          done: snap.val().done,\n          date: snap.val().date\n        });\n      });\n      return cardList;\n    };\n\n    this.cardLearned = card => {\n      var day = new Date();\n      console.log(day); // Apr 30 2000\n\n      var nextDay = new Date(day);\n      const tomorrow = nextDay.setDate(day.getDate() + 1); // console.log(nextDay);\n      // var date = tomorrow.getFullYear()+'-'+(tomorrow.getMonth()+1)+'-'+tomorrow.getDate();\n\n      console.log(card.done, tomorrow);\n      this.databaseLearned.push().set({\n        id: card.id,\n        eng: card.eng,\n        pin: card.pin,\n        han: card.han,\n        done: card.done + 1,\n        date: tomorrow\n      });\n      this.database.child(card.id).remove();\n      this.refreshCards();\n    };\n\n    this.app = firebase.initializeApp(DB_CONFIG);\n    this.database = this.app.database().ref().child('cards');\n    this.databaseLearned = this.app.database().ref().child('cards-learned');\n    this.state = {\n      cards: [],\n      cardsDone: [],\n      cardSearch: [],\n      card: {},\n      index: 0\n    };\n  }\n\n  componentWillMount() {\n    const dbCards = this.state.cards;\n    const dbCardsDone = this.state.cardsDone;\n    this.database.on('child_added', snap => {\n      dbCards.push({\n        id: snap.key,\n        eng: snap.val().eng,\n        han: snap.val().han,\n        pin: snap.val().pin,\n        done: snap.val().done\n      });\n      this.setState({\n        cards: dbCards,\n        card: this.state.cards[0],\n        index: 0\n      });\n    });\n    this.databaseLearned.on('child_added', snap => {\n      dbCardsDone.push({\n        key: snap.key,\n        id: snap.val().id,\n        eng: snap.val().eng,\n        han: snap.val().han,\n        pin: snap.val().pin,\n        done: snap.val().done,\n        date: snap.val().date\n      });\n      dbCardsDone.forEach(cardDone => {\n        if (cardDone.date - Date.parse(new Date()) < 0) {\n          this.databaseLearned.child(cardDone.key).remove();\n          this.database.push().set({\n            id: cardDone.id,\n            eng: cardDone.eng,\n            han: cardDone.han,\n            pin: cardDone.pin,\n            done: cardDone.done\n          });\n        }\n      });\n      this.setState({\n        cardsDone: dbCardsDone.filter(cardDone => cardDone.date - Date.parse(new Date()) > 0),\n        cardSearch: [...dbCards, ...dbCardsDone]\n      });\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, \"Flashcard app\"), React.createElement(Card, {\n      card: this.state.card,\n      cards: this.state.cards,\n      cardsDone: this.state.cardsDone,\n      prevCard: this.prevCard,\n      nextCard: this.nextCard,\n      removeCard: this.removeCard,\n      cardLearned: this.cardLearned,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }), React.createElement(AddCard, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }), React.createElement(SearchCard, {\n      cardSearch: this.state.cardSearch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }));\n  }\n\n}\nexport default App;","map":{"version":3,"sources":["/Users/rodeshel/Desktop/flashcard-app/src/App.js"],"names":["React","Component","Card","AddCard","SearchCard","DB_CONFIG","firebase","App","constructor","props","updateNextCard","cards","i","state","index","appendIndex","list","length","nextCard","setState","card","cardsDonezo","cardsDone","map","console","log","Date","parse","cardSearch","updatePrevCard","subtractIndex","prevCard","resetState","removeCard","id","refList","database","child","remove","newCards","refreshCards","cardList","on","snap","push","key","eng","val","han","pin","done","date","cardLearned","day","nextDay","tomorrow","setDate","getDate","databaseLearned","set","app","initializeApp","ref","componentWillMount","dbCards","dbCardsDone","forEach","cardDone","filter","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Card from './components/Card';\nimport AddCard from './components/AddCard';\nimport SearchCard from './components/SearchCard';\nimport { DB_CONFIG } from './db/Firebase.js';\nimport firebase from 'firebase';\nimport './App.css';\nexport class App extends Component {\n  constructor(props) {\n    super(props)\n    this.app = firebase.initializeApp(DB_CONFIG);\n    this.database = this.app.database().ref().child('cards');\n    this.databaseLearned = this.app.database().ref().child('cards-learned');\n    this.state = {\n      cards: [],\n      cardsDone: [],\n      cardSearch: [],\n      card: {},\n      index: 0\n    }\n  }\n\n  componentWillMount() {\n    const dbCards = this.state.cards;\n    const dbCardsDone = this.state.cardsDone;\n    this.database.on('child_added', snap => {\n      dbCards.push({\n        id: snap.key,\n        eng: snap.val().eng,\n        han: snap.val().han,\n        pin: snap.val().pin,\n        done: snap.val().done\n      })\n      this.setState({\n        cards: dbCards,\n        card: this.state.cards[0],\n        index: 0\n      })\n    })\n    \n    this.databaseLearned.on('child_added', snap => {\n      dbCardsDone.push({\n        key: snap.key,\n        id: snap.val().id,\n        eng: snap.val().eng,\n        han: snap.val().han,\n        pin: snap.val().pin,\n        done: snap.val().done,\n        date: snap.val().date\n      })\n      dbCardsDone.forEach((cardDone) => {\n        if((cardDone.date - Date.parse(new Date())) < 0){\n          this.databaseLearned.child(cardDone.key).remove();\n          this.database.push().set({\n            id: cardDone.id,\n            eng: cardDone.eng,\n            han: cardDone.han,\n            pin: cardDone.pin,\n            done: cardDone.done\n          });\n        }\n      })\n      this.setState({\n        cardsDone: dbCardsDone.filter(cardDone => cardDone.date - Date.parse(new Date()) > 0),\n        cardSearch: [...dbCards, ...dbCardsDone]\n      })\n    })\n  }\n  updateNextCard = (cards) => {\n    var i = this.state.index;\n    if(!(i+1 in cards)) {\n      return cards[0];\n    } else {\n      return cards[i+1];\n    }\n    // const card = cards[Math.floor(Math.random() * cards.length)];\n    // return card;\n  }\n  appendIndex = (index) => {\n    var list = this.state.cards;\n    if(index+1 > list.length - 1) {\n      return 0;\n    } else {\n      return index + 1;\n    }\n  }\n  nextCard = () => {\n    this.setState({\n      cards: this.state.cards,\n      card: this.updateNextCard(this.state.cards),\n      index: this.appendIndex(this.state.index)\n    })\n    var cardsDonezo = this.state.cardsDone;\n    // var cardSearched = this.state.cardSearch;\n\n    cardsDonezo.map((card) => {\n      return console.log(Date.parse(new Date()));\n    })\n    console.log(this.state.cardsDone, this.state.cardSearch);\n  }\n  updatePrevCard = (cards) => {\n    var i = this.state.index;\n    if(!(i-1 in cards)) {\n      return cards[cards.length - 1];\n    } else {\n      return cards[i-1];\n    }\n    // const card = cards[Math.floor(Math.random() * cards.length)];\n    // return card;\n  }\n \n  subtractIndex = (index) => {\n    var list = this.state.cards;\n    if(index-1 < 0) {\n      return list.length - 1;\n    } else {\n      return index - 1;\n    }\n  }\n  prevCard = () => {\n    this.setState({\n      cards: this.state.cards,\n      card: this.updatePrevCard(this.state.cards),\n      index: this.subtractIndex(this.state.index)\n    })\n  }\n  resetState = () => {\n    this.setState({\n      cards: [],\n      card: {},\n      index: 1\n    })\n  }\n  removeCard = (id) => {\n    console.log(id);\n    this.resetState();\n    var refList = [];\n    console.log(refList);\n    this.database.child(id).remove();\n    var newCards = this.refreshCards(refList);\n    this.setState({\n      cards: newCards,\n      card: newCards[0],\n      index: 1\n    })\n  }\n  refreshCards = (cardList) => {\n    this.database.on('child_added', snap => {\n      cardList.push({\n        id: snap.key,\n        eng: snap.val().eng,\n        han: snap.val().han,\n        pin: snap.val().pin,\n        done: snap.val().done,\n        date: snap.val().date\n      })\n    })\n    return cardList;\n  }\n  cardLearned = (card) => {\n    var day = new Date();\n    console.log(day); // Apr 30 2000\n\n    var nextDay = new Date(day);\n    const tomorrow = nextDay.setDate(day.getDate()+1);\n    // console.log(nextDay);\n    // var date = tomorrow.getFullYear()+'-'+(tomorrow.getMonth()+1)+'-'+tomorrow.getDate();\n    console.log(card.done, tomorrow);\n    this.databaseLearned.push().set({\n      id: card.id,\n      eng: card.eng,\n      pin: card.pin,\n      han: card.han,\n      done: card.done + 1,\n      date: tomorrow\n    });\n    this.database.child(card.id).remove();\n    this.refreshCards();\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Flashcard app</h1>\n        <Card card={this.state.card} cards={this.state.cards} cardsDone={this.state.cardsDone} prevCard={this.prevCard} nextCard={this.nextCard} removeCard={this.removeCard} cardLearned={this.cardLearned}/>\n        <AddCard />\n        <SearchCard cardSearch={this.state.cardSearch}/>\n      </div>\n    )\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}