{"ast":null,"code":"var _jsxFileName = \"/Users/rodeshel/Desktop/flashcard-app/src/App.js\";\nimport React, { Component } from 'react';\nimport Card from './components/Card';\nimport AddCard from './components/AddCard';\nimport SearchCard from './components/SearchCard';\nimport { DB_CONFIG } from './db/Firebase.js';\nimport firebase from 'firebase';\nimport './App.css';\nexport class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.refDBLearned = () => {\n      this.state.cardsDone.forEach(cardDone => {\n        if (cardDone.date - Date.parse(new Date()) < 0) {\n          this.databaseLearned.child(cardDone.key).remove();\n          this.database.push().set({\n            id: cardDone.id,\n            eng: cardDone.eng,\n            han: cardDone.han,\n            pin: cardDone.pin,\n            done: cardDone.done\n          });\n          console.log(cardDone.key);\n        }\n      });\n    };\n\n    this.updateNextCard = cards => {\n      var i = this.state.index;\n\n      if (!(i + 1 in cards)) {\n        return cards[0];\n      } else {\n        return cards[i + 1];\n      } // const card = cards[Math.floor(Math.random() * cards.length)];\n      // return card;\n\n    };\n\n    this.appendIndex = index => {\n      var list = this.state.cards;\n\n      if (index + 1 > list.length - 1) {\n        return 0;\n      } else {\n        return index + 1;\n      }\n    };\n\n    this.nextCard = () => {\n      this.setState({\n        cards: this.state.cards,\n        card: this.updateNextCard(this.state.cards),\n        index: this.appendIndex(this.state.index)\n      });\n      var cardsDonezo = this.state.cardsDone; // var cardSearched = this.state.cardSearch;\n\n      cardsDonezo.map(card => {\n        return console.log(Date.parse(new Date()));\n      });\n      console.log(this.state.cardsDone, this.state.cardSearch);\n    };\n\n    this.updatePrevCard = cards => {\n      var i = this.state.index;\n\n      if (!(i - 1 in cards)) {\n        return cards[cards.length - 1];\n      } else {\n        return cards[i - 1];\n      } // const card = cards[Math.floor(Math.random() * cards.length)];\n      // return card;\n\n    };\n\n    this.subtractIndex = index => {\n      var list = this.state.cards;\n\n      if (index - 1 < 0) {\n        return list.length - 1;\n      } else {\n        return index - 1;\n      }\n    };\n\n    this.prevCard = () => {\n      this.setState({\n        cards: this.state.cards,\n        card: this.updatePrevCard(this.state.cards),\n        index: this.subtractIndex(this.state.index)\n      });\n    };\n\n    this.removeCard = id => {\n      console.log(id);\n      this.resetState();\n      var refList = [];\n      console.log(refList);\n      this.database.child(id).remove();\n      var newCards = this.refreshCards(refList);\n      this.setState({\n        cards: newCards,\n        card: newCards[0],\n        index: 1\n      });\n    };\n\n    this.refreshCards = cardList => {\n      this.database.on('child_added', snap => {\n        cardList.push({\n          id: snap.key,\n          eng: snap.val().eng,\n          han: snap.val().han,\n          pin: snap.val().pin,\n          done: snap.val().done,\n          date: snap.val().date\n        });\n      });\n      return cardList;\n    };\n\n    this.cardLearned = card => {\n      var day = new Date();\n      console.log(day); // Apr 30 2000\n\n      var nextDay = new Date(day);\n      const tomorrow = nextDay.setDate(day.getDate() + 1);\n      let refList = []; // console.log(nextDay);\n      // var date = tomorrow.getFullYear()+'-'+(tomorrow.getMonth()+1)+'-'+tomorrow.getDate();\n\n      console.log(card.done, tomorrow);\n      this.databaseLearned.push().set({\n        id: card.id,\n        eng: card.eng,\n        pin: card.pin,\n        han: card.han,\n        done: card.done + 1,\n        date: tomorrow\n      });\n      this.database.child(card.id).remove();\n      let newList = this.refreshCards(refList);\n      this.setState({\n        cards: newList,\n        card: this.state.cards[0],\n        index: 0\n      });\n    };\n\n    this.app = firebase.initializeApp(DB_CONFIG);\n    this.database = this.app.database().ref().child('cards');\n    this.databaseLearned = this.app.database().ref().child('cards-learned');\n    this.state = {\n      cards: [],\n      cardsDone: [],\n      cardSearch: [],\n      card: {},\n      index: 0\n    };\n    this.refDBLearned = this.refDBLearned.bind(this, this.state.cardsDone);\n  }\n\n  componentWillMount() {\n    const dbCards = this.state.cards;\n    const dbCardsDone = this.state.cardsDone;\n    const tempCards = [];\n    this.database.on('child_added', snap => {\n      dbCards.push({\n        id: snap.key,\n        eng: snap.val().eng,\n        han: snap.val().han,\n        pin: snap.val().pin,\n        done: snap.val().done\n      });\n      this.setState({\n        cards: dbCards,\n        card: this.state.cards[0],\n        index: 0\n      });\n    });\n    this.databaseLearned.on('child_added', snap => {\n      dbCardsDone.push({\n        key: snap.key,\n        id: snap.val().id,\n        eng: snap.val().eng,\n        han: snap.val().han,\n        pin: snap.val().pin,\n        done: snap.val().done,\n        date: snap.val().date\n      });\n      tempCards.push({\n        key: snap.key,\n        id: snap.val().id,\n        eng: snap.val().eng,\n        han: snap.val().han,\n        pin: snap.val().pin,\n        done: snap.val().done,\n        date: snap.val().date\n      });\n      this.setState({\n        cardsDone: dbCardsDone,\n        cardSearch: [...dbCards, ...dbCardsDone]\n      });\n    }); // .filter(cardDone => cardDone.date - Date.parse(new Date()) > 0)\n    // dbCardsDone.every((cardDone) => {\n    //   if(cardDone.date - Date.parse(new Date()) < 0) {\n    //     this.databaseLearned.child(cardDone.key).remove();\n    //     this.database.push().set({\n    //       id: cardDone.id,\n    //       eng: cardDone.eng,\n    //       han: cardDone.han,\n    //       pin: cardDone.pin,\n    //       done: cardDone.done\n    //     })\n    //   }\n    //   console.log(dbCardsDone);\n    //   return true;\n    // })\n\n    this.refDBLearned();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }, \"Flashcard app\"), React.createElement(Card, {\n      card: this.state.card,\n      cards: this.state.cards,\n      cardsDone: this.state.cardsDone,\n      prevCard: this.prevCard,\n      nextCard: this.nextCard,\n      removeCard: this.removeCard,\n      cardLearned: this.cardLearned,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }), React.createElement(AddCard, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }), React.createElement(SearchCard, {\n      cardSearch: this.state.cardSearch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }));\n  }\n\n}\nexport default App;","map":{"version":3,"sources":["/Users/rodeshel/Desktop/flashcard-app/src/App.js"],"names":["React","Component","Card","AddCard","SearchCard","DB_CONFIG","firebase","App","constructor","props","refDBLearned","state","cardsDone","forEach","cardDone","date","Date","parse","databaseLearned","child","key","remove","database","push","set","id","eng","han","pin","done","console","log","updateNextCard","cards","i","index","appendIndex","list","length","nextCard","setState","card","cardsDonezo","map","cardSearch","updatePrevCard","subtractIndex","prevCard","removeCard","resetState","refList","newCards","refreshCards","cardList","on","snap","val","cardLearned","day","nextDay","tomorrow","setDate","getDate","newList","app","initializeApp","ref","bind","componentWillMount","dbCards","dbCardsDone","tempCards","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Card from './components/Card';\nimport AddCard from './components/AddCard';\nimport SearchCard from './components/SearchCard';\nimport { DB_CONFIG } from './db/Firebase.js';\nimport firebase from 'firebase';\nimport './App.css';\nexport class App extends Component {\n  constructor(props) {\n    super(props)\n    this.app = firebase.initializeApp(DB_CONFIG);\n    this.database = this.app.database().ref().child('cards');\n    this.databaseLearned = this.app.database().ref().child('cards-learned');\n    this.state = {\n      cards: [],\n      cardsDone: [],\n      cardSearch: [],\n      card: {},\n      index: 0\n    }\n    this.refDBLearned = this.refDBLearned.bind(this, this.state.cardsDone);\n  }\n\n  componentWillMount() {\n    const dbCards = this.state.cards;\n    const dbCardsDone = this.state.cardsDone;\n    const tempCards = [];\n    this.database.on('child_added', snap => {\n      dbCards.push({\n        id: snap.key,\n        eng: snap.val().eng,\n        han: snap.val().han,\n        pin: snap.val().pin,\n        done: snap.val().done\n      })\n      this.setState({\n        cards: dbCards,\n        card: this.state.cards[0],\n        index: 0\n      })\n    })\n    \n    this.databaseLearned.on('child_added', (snap) => {\n      dbCardsDone.push({\n        key: snap.key,\n        id: snap.val().id,\n        eng: snap.val().eng,\n        han: snap.val().han,\n        pin: snap.val().pin,\n        done: snap.val().done,\n        date: snap.val().date\n      })\n      tempCards.push({\n        key: snap.key,\n        id: snap.val().id,\n        eng: snap.val().eng,\n        han: snap.val().han,\n        pin: snap.val().pin,\n        done: snap.val().done,\n        date: snap.val().date\n      })\n      this.setState({\n        cardsDone: dbCardsDone,\n        cardSearch: [...dbCards, ...dbCardsDone]\n      })\n    })\n    // .filter(cardDone => cardDone.date - Date.parse(new Date()) > 0)\n    // dbCardsDone.every((cardDone) => {\n    //   if(cardDone.date - Date.parse(new Date()) < 0) {\n    //     this.databaseLearned.child(cardDone.key).remove();\n    //     this.database.push().set({\n    //       id: cardDone.id,\n    //       eng: cardDone.eng,\n    //       han: cardDone.han,\n    //       pin: cardDone.pin,\n    //       done: cardDone.done\n    //     })\n    //   }\n    //   console.log(dbCardsDone);\n    //   return true;\n    // })\n    this.refDBLearned();\n  }\n  refDBLearned = () => {\n    this.state.cardsDone.forEach(cardDone => {\n      if(cardDone.date - Date.parse(new Date()) < 0) {\n        this.databaseLearned.child(cardDone.key).remove();\n        this.database.push().set({\n          id: cardDone.id,\n          eng: cardDone.eng,\n          han: cardDone.han,\n          pin: cardDone.pin,\n          done: cardDone.done\n        })\n        console.log(cardDone.key)\n      }\n    })\n  }\n  /**\n   * Go to the next element by retrieving the index\n   */\n  updateNextCard = (cards) => {\n    var i = this.state.index;\n    if(!(i+1 in cards)) {\n      return cards[0];\n    } else {\n      return cards[i+1];\n    }\n    // const card = cards[Math.floor(Math.random() * cards.length)];\n    // return card;\n  }\n  /**\n   * increase the index to point to the next element in the cards list\n   */\n  appendIndex = (index) => {\n    var list = this.state.cards;\n    if(index+1 > list.length - 1) {\n      return 0;\n    } else {\n      return index + 1;\n    }\n  }\n  /**\n   * Gets the next card\n   */\n  nextCard = () => {\n    this.setState({\n      cards: this.state.cards,\n      card: this.updateNextCard(this.state.cards),\n      index: this.appendIndex(this.state.index)\n    })\n    var cardsDonezo = this.state.cardsDone;\n    // var cardSearched = this.state.cardSearch;\n\n    cardsDonezo.map((card) => {\n      return console.log(Date.parse(new Date()));\n    })\n    console.log(this.state.cardsDone, this.state.cardSearch);\n  }\n\n  /**\n   * Helps get the previous element by retrieving the index\n   */\n  updatePrevCard = (cards) => {\n    var i = this.state.index;\n    if(!(i-1 in cards)) {\n      return cards[cards.length - 1];\n    } else {\n      return cards[i-1];\n    }\n    // const card = cards[Math.floor(Math.random() * cards.length)];\n    // return card;\n  }\n \n  /**\n   * Subtracts the index of the cards list to point to the previous element\n   */\n  subtractIndex = (index) => {\n    var list = this.state.cards;\n    if(index-1 < 0) {\n      return list.length - 1;\n    } else {\n      return index - 1;\n    }\n  }\n  /**\n   * Goes back to the previous card in the cards database\n   */\n  prevCard = () => {\n    this.setState({\n      cards: this.state.cards,\n      card: this.updatePrevCard(this.state.cards),\n      index: this.subtractIndex(this.state.index)\n    })\n  }\n  // resetState = () => {\n  //   this.setState({\n  //     cards: [],\n  //     card: {},\n  //     index: 1\n  //   })\n  // }\n\n  /**\n   * Removes the card from the cards database\n   */\n  removeCard = (id) => {\n    console.log(id);\n    this.resetState();\n    var refList = [];\n    console.log(refList);\n    this.database.child(id).remove();\n    var newCards = this.refreshCards(refList);\n    this.setState({\n      cards: newCards,\n      card: newCards[0],\n      index: 1\n    })\n  }\n  /**\n   * Refreshes cards when action occurs\n   */\n  refreshCards = (cardList) => {\n    this.database.on('child_added', snap => {\n      cardList.push({\n        id: snap.key,\n        eng: snap.val().eng,\n        han: snap.val().han,\n        pin: snap.val().pin,\n        done: snap.val().done,\n        date: snap.val().date\n      })\n    })\n    return cardList;\n  }\n  /**\n   * When done learning a card delete card from card database and transfer it to cards-learned database\n   */\n  cardLearned = (card) => {\n    var day = new Date();\n    console.log(day); // Apr 30 2000\n\n    var nextDay = new Date(day);\n    const tomorrow = nextDay.setDate(day.getDate()+1);\n    let refList = []\n    // console.log(nextDay);\n    // var date = tomorrow.getFullYear()+'-'+(tomorrow.getMonth()+1)+'-'+tomorrow.getDate();\n    console.log(card.done, tomorrow);\n    this.databaseLearned.push().set({ id: card.id, eng: card.eng, pin: card.pin, han: card.han, done: card.done + 1, date: tomorrow });\n    this.database.child(card.id).remove();\n    let newList = this.refreshCards(refList)\n    this.setState({ cards: newList, card: this.state.cards[0], index: 0 });\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Flashcard app</h1>\n        <Card card={this.state.card} cards={this.state.cards} cardsDone={this.state.cardsDone} prevCard={this.prevCard} nextCard={this.nextCard} removeCard={this.removeCard} cardLearned={this.cardLearned}/>\n        <AddCard />\n        <SearchCard cardSearch={this.state.cardSearch}/>\n      </div>\n    )\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}