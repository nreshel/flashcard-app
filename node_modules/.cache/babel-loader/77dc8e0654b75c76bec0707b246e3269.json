{"ast":null,"code":"var _jsxFileName = \"/Users/rodeshel/Desktop/flashcard-app/src/App.js\";\nimport React, { Component } from 'react';\nimport Card from './components/Card';\nimport AddCard from './components/AddCard';\nimport SearchCard from './components/SearchCard';\nimport { DB_CONFIG } from './db/Firebase.js';\nimport firebase from 'firebase';\nimport './App.css';\nexport class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.resetCardTime = () => {\n      let i,\n          j = 0;\n\n      for (i; i < this.state.cards.length; i++) {\n        for (j; j < this.state.cardsDone.length; j++) {\n          if (cardsDone[j] == cards[i]) {}\n        }\n      }\n    };\n\n    this.updateNextCard = cards => {\n      var i = this.state.index;\n\n      if (!(i + 1 in cards)) {\n        return cards[0];\n      } else {\n        return cards[i + 1];\n      } // const card = cards[Math.floor(Math.random() * cards.length)];\n      // return card;\n\n    };\n\n    this.appendIndex = index => {\n      var list = this.state.cards;\n\n      if (index + 1 > list.length - 1) {\n        return 0;\n      } else {\n        return index + 1;\n      }\n    };\n\n    this.nextCard = () => {\n      this.setState({\n        cards: this.state.cards,\n        card: this.updateNextCard(this.state.cards),\n        index: this.appendIndex(this.state.index)\n      });\n      var cardsDonezo = this.state.cardsDone;\n      cardsDonezo.map(card => {\n        return console.log(Date.parse(new Date()));\n      });\n    };\n\n    this.updatePrevCard = cards => {\n      var i = this.state.index;\n\n      if (!(i - 1 in cards)) {\n        return cards[cards.length - 1];\n      } else {\n        return cards[i - 1];\n      } // const card = cards[Math.floor(Math.random() * cards.length)];\n      // return card;\n\n    };\n\n    this.subtractIndex = index => {\n      var list = this.state.cards;\n\n      if (index - 1 < 0) {\n        return list.length - 1;\n      } else {\n        return index - 1;\n      }\n    };\n\n    this.prevCard = () => {\n      this.setState({\n        cards: this.state.cards,\n        card: this.updatePrevCard(this.state.cards),\n        index: this.subtractIndex(this.state.index)\n      });\n    };\n\n    this.resetState = () => {\n      this.setState({\n        cards: [],\n        card: {},\n        index: 1\n      });\n    };\n\n    this.removeCard = id => {\n      console.log(id);\n      this.resetState();\n      var refList = [];\n      console.log(refList);\n      this.database.child(id).remove();\n      var newCards = this.refreshCards(refList);\n      this.setState({\n        cards: newCards,\n        card: newCards[0],\n        index: 1\n      });\n    };\n\n    this.refreshCards = cardList => {\n      this.database.on('child_added', snap => {\n        cardList.push({\n          id: snap.key,\n          eng: snap.val().eng,\n          han: snap.val().han,\n          pin: snap.val().pin,\n          done: snap.val().done,\n          date: snap.val().date\n        });\n      });\n      return cardList;\n    };\n\n    this.cardLearned = card => {\n      var day = new Date();\n      console.log(day); // Apr 30 2000\n\n      var nextDay = new Date(day);\n      const tomorrow = nextDay.setDate(day.getDate() + 1); // console.log(nextDay);\n      // var date = tomorrow.getFullYear()+'-'+(tomorrow.getMonth()+1)+'-'+tomorrow.getDate();\n\n      console.log(card.done, tomorrow);\n      this.databaseLearned.push().set({\n        id: card.id,\n        eng: card.eng,\n        pin: card.pin,\n        han: card.han,\n        done: card.done + 1,\n        date: tomorrow\n      });\n    };\n\n    this.app = firebase.initializeApp(DB_CONFIG);\n    this.database = this.app.database().ref().child('cards');\n    this.databaseLearned = this.app.database().ref().child('cards-learned');\n    this.state = {\n      cards: [],\n      cardsDone: [],\n      card: {},\n      index: 0\n    };\n  }\n\n  componentWillMount() {\n    const dbCards = this.state.cards;\n    const dbCardsDone = this.state.cardsDone;\n    this.database.on('child_added', snap => {\n      dbCards.push({\n        id: snap.key,\n        eng: snap.val().eng,\n        han: snap.val().han,\n        pin: snap.val().pin,\n        done: snap.val().done,\n        date: snap.val().date\n      });\n      this.setState({\n        cards: this.state.cards,\n        card: this.state.cards[0],\n        index: 0\n      });\n    });\n    this.databaseLearned.on('child_added', snap => {\n      dbCardsDone.push({\n        id: snap.val().id,\n        eng: snap.val().eng,\n        han: snap.val().han,\n        pin: snap.val().pin,\n        done: snap.val().done,\n        date: snap.val().date\n      });\n      this.setState({\n        cardsDone: dbCardsDone\n      });\n    }); // this.cardTimeDone;\n\n    console.log(this.state.cardsDone);\n  } // cardTimeDone = () => {\n  //   let cardAdded = new Date();\n  // }\n\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, \"Flashcard app\"), React.createElement(Card, {\n      card: this.state.card,\n      prevCard: this.prevCard,\n      nextCard: this.nextCard,\n      removeCard: this.removeCard,\n      cardLearned: this.cardLearned,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }), React.createElement(AddCard, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }), React.createElement(SearchCard, {\n      cards: this.state.cards,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }));\n  }\n\n}\nexport default App;","map":{"version":3,"sources":["/Users/rodeshel/Desktop/flashcard-app/src/App.js"],"names":["React","Component","Card","AddCard","SearchCard","DB_CONFIG","firebase","App","constructor","props","resetCardTime","i","j","state","cards","length","cardsDone","updateNextCard","index","appendIndex","list","nextCard","setState","card","cardsDonezo","map","console","log","Date","parse","updatePrevCard","subtractIndex","prevCard","resetState","removeCard","id","refList","database","child","remove","newCards","refreshCards","cardList","on","snap","push","key","eng","val","han","pin","done","date","cardLearned","day","nextDay","tomorrow","setDate","getDate","databaseLearned","set","app","initializeApp","ref","componentWillMount","dbCards","dbCardsDone","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Card from './components/Card';\nimport AddCard from './components/AddCard';\nimport SearchCard from './components/SearchCard';\nimport { DB_CONFIG } from './db/Firebase.js';\nimport firebase from 'firebase';\nimport './App.css';\nexport class App extends Component {\n  constructor(props) {\n    super(props)\n    this.app = firebase.initializeApp(DB_CONFIG);\n    this.database = this.app.database().ref().child('cards');\n    this.databaseLearned = this.app.database().ref().child('cards-learned');\n    this.state = {\n      cards: [],\n      cardsDone: [],\n      card: {},\n      index: 0\n    }\n  }\n\n  componentWillMount() {\n    const dbCards = this.state.cards;\n    const dbCardsDone = this.state.cardsDone;\n    this.database.on('child_added', snap => {\n      dbCards.push({\n        id: snap.key,\n        eng: snap.val().eng,\n        han: snap.val().han,\n        pin: snap.val().pin,\n        done: snap.val().done,\n        date: snap.val().date\n      })\n      this.setState({\n        cards: this.state.cards,\n        card: this.state.cards[0],\n        index: 0\n      })\n    })\n\n    this.databaseLearned.on('child_added', snap => {\n      dbCardsDone.push({\n        id: snap.val().id,\n        eng: snap.val().eng,\n        han: snap.val().han,\n        pin: snap.val().pin,\n        done: snap.val().done,\n        date: snap.val().date\n      })\n      this.setState({\n        cardsDone: dbCardsDone\n      })\n    })\n    // this.cardTimeDone;\n    console.log(this.state.cardsDone);\n    \n  }\n  // cardTimeDone = () => {\n  //   let cardAdded = new Date();\n  // }\n\n  resetCardTime = () => {\n    let i, j = 0;\n    for(i; i < this.state.cards.length; i++) {\n      for(j; j < this.state.cardsDone.length; j++) {\n        if(cardsDone[j] == cards[i]) {\n          \n        }\n      }\n    }\n  }\n  updateNextCard = (cards) => {\n    var i = this.state.index;\n    if(!(i+1 in cards)) {\n      return cards[0];\n    } else {\n      return cards[i+1];\n    }\n    // const card = cards[Math.floor(Math.random() * cards.length)];\n    // return card;\n  }\n  appendIndex = (index) => {\n    var list = this.state.cards;\n    if(index+1 > list.length - 1) {\n      return 0;\n    } else {\n      return index + 1;\n    }\n  }\n  nextCard = () => {\n    this.setState({\n      cards: this.state.cards,\n      card: this.updateNextCard(this.state.cards),\n      index: this.appendIndex(this.state.index)\n    })\n    var cardsDonezo = this.state.cardsDone;\n\n    cardsDonezo.map((card) => {\n      return console.log(Date.parse(new Date()));\n    })\n  }\n  updatePrevCard = (cards) => {\n    var i = this.state.index;\n    if(!(i-1 in cards)) {\n      return cards[cards.length - 1];\n    } else {\n      return cards[i-1];\n    }\n    // const card = cards[Math.floor(Math.random() * cards.length)];\n    // return card;\n  }\n \n  subtractIndex = (index) => {\n    var list = this.state.cards;\n    if(index-1 < 0) {\n      return list.length - 1;\n    } else {\n      return index - 1;\n    }\n  }\n  prevCard = () => {\n    this.setState({\n      cards: this.state.cards,\n      card: this.updatePrevCard(this.state.cards),\n      index: this.subtractIndex(this.state.index)\n    })\n  }\n  resetState = () => {\n    this.setState({\n      cards: [],\n      card: {},\n      index: 1\n    })\n  }\n  removeCard = (id) => {\n    console.log(id);\n    this.resetState();\n    var refList = [];\n    console.log(refList);\n    this.database.child(id).remove();\n    var newCards = this.refreshCards(refList);\n    this.setState({\n      cards: newCards,\n      card: newCards[0],\n      index: 1\n    })\n  }\n  refreshCards = (cardList) => {\n    this.database.on('child_added', snap => {\n      cardList.push({\n        id: snap.key,\n        eng: snap.val().eng,\n        han: snap.val().han,\n        pin: snap.val().pin,\n        done: snap.val().done,\n        date: snap.val().date\n      })\n    })\n    return cardList;\n  }\n  cardLearned = (card) => {\n    var day = new Date();\n    console.log(day); // Apr 30 2000\n\n    var nextDay = new Date(day);\n    const tomorrow = nextDay.setDate(day.getDate()+1);\n    // console.log(nextDay);\n    // var date = tomorrow.getFullYear()+'-'+(tomorrow.getMonth()+1)+'-'+tomorrow.getDate();\n    console.log(card.done, tomorrow);\n    this.databaseLearned.push().set({\n      id: card.id,\n      eng: card.eng,\n      pin: card.pin,\n      han: card.han,\n      done: card.done + 1,\n      date: tomorrow\n    });\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Flashcard app</h1>\n        <Card card={this.state.card} prevCard={this.prevCard} nextCard={this.nextCard} removeCard={this.removeCard} cardLearned={this.cardLearned}/>\n        <AddCard />\n        <SearchCard cards={this.state.cards}/>\n      </div>\n    )\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}