{"ast":null,"code":"var _jsxFileName = \"/Users/rodeshel/Desktop/flashcard-app/src/App.js\";\nimport React, { Component } from 'react';\nimport Card from './components/Card';\nimport AddCard from './components/AddCard';\nimport SearchCard from './components/SearchCard';\nimport { DB_CONFIG } from './db/Firebase.js';\nimport firebase from 'firebase';\nimport './App.css';\nexport class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.refDBLearned = cardsDone => {\n      cardsDone.find(cardDone => {\n        if (cardDone.date - Date.parse(new Date()) < 0) {\n          this.databaseLearned.child(cardDone.key).remove();\n          this.database.push().set({\n            id: cardDone.id,\n            eng: cardDone.eng,\n            han: cardDone.han,\n            pin: cardDone.pin,\n            done: cardDone.done\n          });\n          return true;\n        } else {\n          return false;\n        }\n      });\n    };\n\n    this.updateNextCard = cards => {\n      var i = this.state.index;\n\n      if (!(i + 1 in cards)) {\n        return cards[0];\n      } else {\n        return cards[i + 1];\n      } // const card = cards[Math.floor(Math.random() * cards.length)];\n      // return card;\n\n    };\n\n    this.appendIndex = index => {\n      var list = this.state.cards;\n\n      if (index + 1 > list.length - 1) {\n        return 0;\n      } else {\n        return index + 1;\n      }\n    };\n\n    this.nextCard = () => {\n      this.setState({\n        cards: this.state.cards,\n        card: this.updateNextCard(this.state.cards),\n        index: this.appendIndex(this.state.index)\n      });\n      var cardsDonezo = this.state.cardsDone; // var cardSearched = this.state.cardSearch;\n\n      cardsDonezo.map(card => {\n        return console.log(Date.parse(new Date()));\n      });\n      console.log(this.state.cardsDone, this.state.cardSearch);\n    };\n\n    this.updatePrevCard = cards => {\n      var i = this.state.index;\n\n      if (!(i - 1 in cards)) {\n        return cards[cards.length - 1];\n      } else {\n        return cards[i - 1];\n      } // const card = cards[Math.floor(Math.random() * cards.length)];\n      // return card;\n\n    };\n\n    this.subtractIndex = index => {\n      var list = this.state.cards;\n\n      if (index - 1 < 0) {\n        return list.length - 1;\n      } else {\n        return index - 1;\n      }\n    };\n\n    this.prevCard = () => {\n      this.setState({\n        cards: this.state.cards,\n        card: this.updatePrevCard(this.state.cards),\n        index: this.subtractIndex(this.state.index)\n      });\n    };\n\n    this.removeCard = id => {\n      console.log(id);\n      this.resetState();\n      var refList = [];\n      console.log(refList);\n      this.database.child(id).remove();\n      var newCards = this.refreshCards(refList);\n      this.setState({\n        cards: newCards,\n        card: newCards[0],\n        index: 1\n      });\n    };\n\n    this.refreshCards = cardList => {\n      this.database.on('child_added', snap => {\n        cardList.push({\n          id: snap.key,\n          eng: snap.val().eng,\n          han: snap.val().han,\n          pin: snap.val().pin,\n          done: snap.val().done,\n          date: snap.val().date\n        });\n      });\n      return cardList;\n    };\n\n    this.cardLearned = card => {\n      var day = new Date();\n      console.log(day); // Apr 30 2000\n\n      var nextDay = new Date(day);\n      const tomorrow = nextDay.setDate(day.getDate() + 1);\n      let refList = []; // console.log(nextDay);\n      // var date = tomorrow.getFullYear()+'-'+(tomorrow.getMonth()+1)+'-'+tomorrow.getDate();\n\n      console.log(card.done, tomorrow);\n      this.databaseLearned.push().set({\n        id: card.id,\n        eng: card.eng,\n        pin: card.pin,\n        han: card.han,\n        done: card.done + 1,\n        date: tomorrow\n      });\n      this.database.child(card.id).remove();\n      let newList = this.refreshCards(refList);\n      this.setState({\n        cards: newList,\n        card: this.state.cards[0],\n        index: 0\n      });\n    };\n\n    this.app = firebase.initializeApp(DB_CONFIG);\n    this.database = this.app.database().ref().child('cards');\n    this.databaseLearned = this.app.database().ref().child('cards-learned');\n    this.state = {\n      cards: [],\n      cardsDone: [],\n      cardSearch: [],\n      card: {},\n      index: 0\n    };\n  }\n\n  componentWillMount() {\n    const dbCards = this.state.cards;\n    const dbCardsDone = this.state.cardsDone;\n    const tempCards = [];\n    this.database.on('child_added', snap => {\n      dbCards.push({\n        id: snap.key,\n        eng: snap.val().eng,\n        han: snap.val().han,\n        pin: snap.val().pin,\n        done: snap.val().done\n      });\n      this.setState({\n        cards: dbCards,\n        card: this.state.cards[0],\n        index: 0\n      });\n    });\n    this.databaseLearned.on('child_added', snap => {\n      dbCardsDone.push({\n        key: snap.key,\n        id: snap.val().id,\n        eng: snap.val().eng,\n        han: snap.val().han,\n        pin: snap.val().pin,\n        done: snap.val().done,\n        date: snap.val().date\n      });\n      tempCards.push({\n        key: snap.key,\n        id: snap.val().id,\n        eng: snap.val().eng,\n        han: snap.val().han,\n        pin: snap.val().pin,\n        done: snap.val().done,\n        date: snap.val().date\n      });\n      this.setState({\n        cardsDone: dbCardsDone.filter(cardDone => cardDone.date - Date.parse(new Date()) > 0),\n        cardSearch: [...dbCards, ...dbCardsDone]\n      });\n    }); // dbCardsDone.every((cardDone) => {\n    //   if(cardDone.date - Date.parse(new Date()) < 0) {\n    //     this.databaseLearned.child(cardDone.key).remove();\n    //     this.database.push().set({\n    //       id: cardDone.id,\n    //       eng: cardDone.eng,\n    //       han: cardDone.han,\n    //       pin: cardDone.pin,\n    //       done: cardDone.done\n    //     })\n    //   }\n    //   console.log(dbCardsDone);\n    //   return true;\n    // })\n\n    this.refDBLearned(tempCards);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }, \"Flashcard app\"), React.createElement(Card, {\n      card: this.state.card,\n      cards: this.state.cards,\n      cardsDone: this.state.cardsDone,\n      prevCard: this.prevCard,\n      nextCard: this.nextCard,\n      removeCard: this.removeCard,\n      cardLearned: this.cardLearned,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }), React.createElement(AddCard, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }), React.createElement(SearchCard, {\n      cardSearch: this.state.cardSearch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    }));\n  }\n\n}\nexport default App;","map":{"version":3,"sources":["/Users/rodeshel/Desktop/flashcard-app/src/App.js"],"names":["React","Component","Card","AddCard","SearchCard","DB_CONFIG","firebase","App","constructor","props","refDBLearned","cardsDone","find","cardDone","date","Date","parse","databaseLearned","child","key","remove","database","push","set","id","eng","han","pin","done","updateNextCard","cards","i","state","index","appendIndex","list","length","nextCard","setState","card","cardsDonezo","map","console","log","cardSearch","updatePrevCard","subtractIndex","prevCard","removeCard","resetState","refList","newCards","refreshCards","cardList","on","snap","val","cardLearned","day","nextDay","tomorrow","setDate","getDate","newList","app","initializeApp","ref","componentWillMount","dbCards","dbCardsDone","tempCards","filter","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Card from './components/Card';\nimport AddCard from './components/AddCard';\nimport SearchCard from './components/SearchCard';\nimport { DB_CONFIG } from './db/Firebase.js';\nimport firebase from 'firebase';\nimport './App.css';\nexport class App extends Component {\n  constructor(props) {\n    super(props)\n    this.app = firebase.initializeApp(DB_CONFIG);\n    this.database = this.app.database().ref().child('cards');\n    this.databaseLearned = this.app.database().ref().child('cards-learned');\n    this.state = {\n      cards: [],\n      cardsDone: [],\n      cardSearch: [],\n      card: {},\n      index: 0\n    }\n  }\n\n  componentWillMount() {\n    const dbCards = this.state.cards;\n    const dbCardsDone = this.state.cardsDone;\n    const tempCards = [];\n    this.database.on('child_added', snap => {\n      dbCards.push({\n        id: snap.key,\n        eng: snap.val().eng,\n        han: snap.val().han,\n        pin: snap.val().pin,\n        done: snap.val().done\n      })\n      this.setState({\n        cards: dbCards,\n        card: this.state.cards[0],\n        index: 0\n      })\n    })\n    \n    this.databaseLearned.on('child_added', (snap) => {\n      dbCardsDone.push({\n        key: snap.key,\n        id: snap.val().id,\n        eng: snap.val().eng,\n        han: snap.val().han,\n        pin: snap.val().pin,\n        done: snap.val().done,\n        date: snap.val().date\n      })\n      tempCards.push({\n        key: snap.key,\n        id: snap.val().id,\n        eng: snap.val().eng,\n        han: snap.val().han,\n        pin: snap.val().pin,\n        done: snap.val().done,\n        date: snap.val().date\n      })\n      this.setState({\n        cardsDone: dbCardsDone.filter(cardDone => cardDone.date - Date.parse(new Date()) > 0),\n        cardSearch: [...dbCards, ...dbCardsDone]\n      })\n    })\n\n    // dbCardsDone.every((cardDone) => {\n    //   if(cardDone.date - Date.parse(new Date()) < 0) {\n    //     this.databaseLearned.child(cardDone.key).remove();\n    //     this.database.push().set({\n    //       id: cardDone.id,\n    //       eng: cardDone.eng,\n    //       han: cardDone.han,\n    //       pin: cardDone.pin,\n    //       done: cardDone.done\n    //     })\n    //   }\n    //   console.log(dbCardsDone);\n    //   return true;\n    // })\n    this.refDBLearned(tempCards);\n  }\n  refDBLearned = (cardsDone) => {\n    cardsDone.find(cardDone => {\n      if(cardDone.date - Date.parse(new Date()) < 0) {\n        this.databaseLearned.child(cardDone.key).remove();\n        this.database.push().set({\n          id: cardDone.id,\n          eng: cardDone.eng,\n          han: cardDone.han,\n          pin: cardDone.pin,\n          done: cardDone.done\n        })\n        return true;\n      } else {\n        return false;\n      }\n    })\n  }\n  /**\n   * Go to the next element by retrieving the index\n   */\n  updateNextCard = (cards) => {\n    var i = this.state.index;\n    if(!(i+1 in cards)) {\n      return cards[0];\n    } else {\n      return cards[i+1];\n    }\n    // const card = cards[Math.floor(Math.random() * cards.length)];\n    // return card;\n  }\n  /**\n   * increase the index to point to the next element in the cards list\n   */\n  appendIndex = (index) => {\n    var list = this.state.cards;\n    if(index+1 > list.length - 1) {\n      return 0;\n    } else {\n      return index + 1;\n    }\n  }\n  /**\n   * Gets the next card\n   */\n  nextCard = () => {\n    this.setState({\n      cards: this.state.cards,\n      card: this.updateNextCard(this.state.cards),\n      index: this.appendIndex(this.state.index)\n    })\n    var cardsDonezo = this.state.cardsDone;\n    // var cardSearched = this.state.cardSearch;\n\n    cardsDonezo.map((card) => {\n      return console.log(Date.parse(new Date()));\n    })\n    console.log(this.state.cardsDone, this.state.cardSearch);\n  }\n\n  /**\n   * Helps get the previous element by retrieving the index\n   */\n  updatePrevCard = (cards) => {\n    var i = this.state.index;\n    if(!(i-1 in cards)) {\n      return cards[cards.length - 1];\n    } else {\n      return cards[i-1];\n    }\n    // const card = cards[Math.floor(Math.random() * cards.length)];\n    // return card;\n  }\n \n  /**\n   * Subtracts the index of the cards list to point to the previous element\n   */\n  subtractIndex = (index) => {\n    var list = this.state.cards;\n    if(index-1 < 0) {\n      return list.length - 1;\n    } else {\n      return index - 1;\n    }\n  }\n  /**\n   * Goes back to the previous card in the cards database\n   */\n  prevCard = () => {\n    this.setState({\n      cards: this.state.cards,\n      card: this.updatePrevCard(this.state.cards),\n      index: this.subtractIndex(this.state.index)\n    })\n  }\n  // resetState = () => {\n  //   this.setState({\n  //     cards: [],\n  //     card: {},\n  //     index: 1\n  //   })\n  // }\n\n  /**\n   * Removes the card from the cards database\n   */\n  removeCard = (id) => {\n    console.log(id);\n    this.resetState();\n    var refList = [];\n    console.log(refList);\n    this.database.child(id).remove();\n    var newCards = this.refreshCards(refList);\n    this.setState({\n      cards: newCards,\n      card: newCards[0],\n      index: 1\n    })\n  }\n  /**\n   * Refreshes cards when action occurs\n   */\n  refreshCards = (cardList) => {\n    this.database.on('child_added', snap => {\n      cardList.push({\n        id: snap.key,\n        eng: snap.val().eng,\n        han: snap.val().han,\n        pin: snap.val().pin,\n        done: snap.val().done,\n        date: snap.val().date\n      })\n    })\n    return cardList;\n  }\n  /**\n   * When done learning a card delete card from card database and transfer it to cards-learned database\n   */\n  cardLearned = (card) => {\n    var day = new Date();\n    console.log(day); // Apr 30 2000\n\n    var nextDay = new Date(day);\n    const tomorrow = nextDay.setDate(day.getDate()+1);\n    let refList = []\n    // console.log(nextDay);\n    // var date = tomorrow.getFullYear()+'-'+(tomorrow.getMonth()+1)+'-'+tomorrow.getDate();\n    console.log(card.done, tomorrow);\n    this.databaseLearned.push().set({ id: card.id, eng: card.eng, pin: card.pin, han: card.han, done: card.done + 1, date: tomorrow });\n    this.database.child(card.id).remove();\n    let newList = this.refreshCards(refList)\n    this.setState({ cards: newList, card: this.state.cards[0], index: 0 });\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Flashcard app</h1>\n        <Card card={this.state.card} cards={this.state.cards} cardsDone={this.state.cardsDone} prevCard={this.prevCard} nextCard={this.nextCard} removeCard={this.removeCard} cardLearned={this.cardLearned}/>\n        <AddCard />\n        <SearchCard cardSearch={this.state.cardSearch}/>\n      </div>\n    )\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}